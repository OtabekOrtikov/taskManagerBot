import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import asyncpg
import asyncio
from decimal import Decimal
from datetime import datetime

API_TOKEN = '7933972214:AAFnpcEYmsdjmoPj0D2BSAY-KQucH45sac0'  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
db_pool = None

# SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
CREATE_TABLES_SQL = """
CREATE TABLE IF NOT EXISTS reporters (
    id BIGINT NOT NULL,
    chat_id BIGINT NOT NULL,
    balance NUMERIC DEFAULT 0,
    PRIMARY KEY (id, chat_id)
);

CREATE TABLE IF NOT EXISTS expenses (
    id SERIAL PRIMARY KEY,
    reporter_id BIGINT NOT NULL,
    chat_id BIGINT NOT NULL,
    amount NUMERIC NOT NULL,
    recipient TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (reporter_id, chat_id) REFERENCES reporters (id, chat_id) ON DELETE CASCADE
);
"""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
async def create_db_pool():
    global db_pool
    db_pool = await asyncpg.create_pool(
        user='ixlosfcu_taskManagerBot',       
        password='h2i-5wn-5Ah-Ufh',
        database='ixlosfcu_finhelp',
        host='localhost:5432'
    )
    async with db_pool.acquire() as connection:
        await connection.execute(CREATE_TABLES_SQL)  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async def on_startup():
    await create_db_pool()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîπ /makereporter - –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —É—á–µ—Ç—á–∏–∫–æ–º —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
        "üîπ /add —Å—É–º–º–∞ - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add 100000)\n"
        "üîπ /take —Å—É–º–º–∞ - –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /take 100000 - –ò–≤–∞–Ω)\n"
        "üîπ /report - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü\n\n"
        "üí∞ –í—Å–µ —Å—É–º–º—ã —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö.\n"
        "üöÄ –ù–∞—á–Ω–µ–º!"
    )
    await message.answer(welcome_text)

# –ö–æ–º–∞–Ω–¥–∞ /makereporter
@dp.message(Command("makereporter"))
async def makereporter_handler(message: types.Message):
    reporter_id = message.from_user.id
    chat_id = message.chat.id

    async with db_pool.acquire() as connection:
        await connection.execute(
            """
            INSERT INTO reporters (id, chat_id, balance) 
            VALUES ($1, $2, 0) 
            ON CONFLICT (id, chat_id) DO NOTHING
            """,
            reporter_id, chat_id
        )
    await message.answer("‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—á–µ—Ç—á–∏–∫–æ–º —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /add
@dp.message(Command("add"))
async def add_handler(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    parts = message.text.split()

    if len(parts) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /add 100000")
        return

    amount_text = re.sub(r"[^\d]", "", parts[1])
    try:
        amount = Decimal(amount_text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.")
        return

    async with db_pool.acquire() as connection:
        result = await connection.fetchrow(
            "SELECT balance FROM reporters WHERE id = $1 AND chat_id = $2", user_id, chat_id
        )

        if result:
            current_balance = Decimal(result["balance"]) + amount
            await connection.execute(
                "UPDATE reporters SET balance = $1 WHERE id = $2 AND chat_id = $3",
                current_balance, user_id, chat_id
            )
        else:
            await connection.execute(
                """
                INSERT INTO reporters (id, chat_id, balance) 
                VALUES ($1, $2, $3) 
                ON CONFLICT (id, chat_id) DO UPDATE SET balance = EXCLUDED.balance
                """,
                user_id, chat_id, amount
            )
            current_balance = amount

    await message.answer(f"üí∞ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ ${amount}. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –≤ –∫–∞—Ä–º–∞–Ω–µ: ${current_balance}")

# –ö–æ–º–∞–Ω–¥–∞ /take
@dp.message(Command("take"))
async def take_handler(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    parts = message.text.split(maxsplit=2)

    if len(parts) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /take 100000 - –ò–≤–∞–Ω")
        return

    pattern = r"(\d[\d\s\.]*)\s*(?:-?\s*(.+))?"
    match = re.match(pattern, " ".join(parts[1:]))
    if not match:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /take —Å—É–º–º–∞ - –ø–æ–ª—É—á–∞—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        return

    amount_str, recipient = match.groups()
    amount_str = re.sub(r"[^\d]", "", amount_str)
    try:
        amount = Decimal(amount_str)
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—É–º–º—ã.")
        return

    async with db_pool.acquire() as connection:
        result = await connection.fetchrow(
            "SELECT balance FROM reporters WHERE id = $1 AND chat_id = $2", user_id, chat_id
        )

        if not result:
            await message.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –¥–µ–Ω—å–≥–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —Å–Ω–∞—á–∞–ª–∞.")
            return

        current_balance = Decimal(result["balance"])

        if amount > current_balance:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞.")
            return

        new_balance = current_balance - amount

        await connection.execute(
            "UPDATE reporters SET balance = $1 WHERE id = $2 AND chat_id = $3",
            new_balance, user_id, chat_id
        )

        await connection.execute(
            "INSERT INTO expenses (reporter_id, chat_id, amount, recipient) VALUES ($1, $2, $3, $4)",
            user_id, chat_id, amount, recipient
        )

    response_text = f"‚úÖ –í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ ${amount}. –û—Å—Ç–∞–ª–æ—Å—å: ${new_balance}"
    if recipient:
        response_text += f" (–Ω–∞ {recipient})"
    await message.answer(response_text)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await on_startup()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
